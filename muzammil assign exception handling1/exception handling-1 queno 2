{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "62a28c89-7975-4f7e-99b3-e6824db54df5",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#if exception are not handled it drives the programme in halt state.exception handling is required in python to prevent from terminating abruptly.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8e10d5ae-dc3e-414d-83e7-0c6624e3c362",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#for example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "30829843-4241-4fb6-b60c-62f50f268b84",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n",
      "83\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for +: 'int' and 'list'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[11], line 5\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(addnumbers(\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m6\u001b[39m))\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28mprint\u001b[39m(addnumbers(\u001b[38;5;241m3\u001b[39m,\u001b[38;5;241m80\u001b[39m))\n\u001b[1;32m----> 5\u001b[0m \u001b[38;5;28mprint\u001b[39m(addnumbers(\u001b[38;5;241m2\u001b[39m,a))\n\u001b[0;32m      6\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mall done\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "Cell \u001b[1;32mIn[11], line 2\u001b[0m, in \u001b[0;36maddnumbers\u001b[1;34m(num1, num2)\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21maddnumbers\u001b[39m(num1,num2):\n\u001b[1;32m----> 2\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m(num1\u001b[38;5;241m+\u001b[39mnum2)\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'int' and 'list'"
     ]
    }
   ],
   "source": [
    "def addnumbers(num1,num2):\n",
    "    return(num1+num2)\n",
    "print(addnumbers(2,6))\n",
    "print(addnumbers(3,80))\n",
    "print(addnumbers(2,a))\n",
    "print('all done')\n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "67f83c90-50f4-4d38-bd63-3ab8b0ee6a0e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n",
      "83\n",
      "invalid number\n",
      "all done\n"
     ]
    }
   ],
   "source": [
    "def addnumbers(num1,num2):\n",
    "    try:\n",
    "        return(num1+num2)\n",
    "    except TypeError:\n",
    "        return ('invalid number')\n",
    "print(addnumbers(2,6))\n",
    "print(addnumbers(3,80))\n",
    "print(addnumbers(2,a))\n",
    "print('all done')\n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b662ced6-602f-4de5-9315-9b88931fceb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#so in above we saw before using exception handling and after using exception handling"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
