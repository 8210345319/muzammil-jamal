{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ce2ae2d-927e-4507-bc71-07c4cad3dc5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#'try' and 'except' statement can catch  expectation ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "247db39c-74f5-48b5-9cad-37c0305cacef",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.5\n",
      "0.75\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for /: 'int' and 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[44], line 4\u001b[0m\n\u001b[0;32m      2\u001b[0m number\u001b[38;5;241m=\u001b[39m[\u001b[38;5;241m4\u001b[39m,\u001b[38;5;241m8\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m5\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m num \u001b[38;5;129;01min\u001b[39;00m number:\n\u001b[1;32m----> 4\u001b[0m         \u001b[38;5;28mprint\u001b[39m(x\u001b[38;5;241m/\u001b[39mnum)\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for /: 'int' and 'str'"
     ]
    }
   ],
   "source": [
    "x=6\n",
    "number=[4,8,\"5\"]\n",
    "for num in number:\n",
    "        print(x/num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e82dfb1f-2fae-4eab-bc97-610c6e60816f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.5\n",
      "0.75\n",
      "unsupported operand type(s) for /: 'int' and 'str'\n"
     ]
    }
   ],
   "source": [
    "x=6\n",
    "number=[4,8,\"5\"]\n",
    "try:\n",
    "    for num in number:\n",
    "        print(x/num)\n",
    "except TypeError as e:\n",
    "            print(e)\n",
    "\n",
    "\n",
    "\n",
    "            "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee40bc1d-26bd-433f-b1df-fffffa38b7c9",
   "metadata": {},
   "source": [
    "so in these way by using try and except we are able to catch exception which is 'typeerror'."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
