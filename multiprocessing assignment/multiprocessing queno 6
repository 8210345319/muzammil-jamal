{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3e99ed1a-105b-4d28-b5f6-a6003552d9bb",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import multiprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c1d374e2-6390-4c3d-944b-b7544c639f8a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "even number\n",
      "2 4 6 8 10\n"
     ]
    }
   ],
   "source": [
    "def test1():\n",
    "    print(\"even number\")\n",
    "if __name__==\"__main__\":\n",
    "    a=multiprocessing.Process(target=test1())\n",
    "    print(2,4,6,8,10)\n",
    "    a.start()\n",
    "    a.join()\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e38481fc-8396-49a9-b53e-0de3484d2ac2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "odd number\n",
      "1 3 5 7 9 11 13\n"
     ]
    }
   ],
   "source": [
    "def test2():\n",
    "    print(\"odd number\")\n",
    "if __name__==\"__main__\":\n",
    "    b=multiprocessing.Process(target=test2())\n",
    "    print(1,3,5,7,9,11,13)\n",
    "    b.start()\n",
    "    b.join()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a9dd2f30-54cb-4716-bf3b-5ad20dae833c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "prime number\n",
      "1 3 5 7 11 13 17 19\n"
     ]
    }
   ],
   "source": [
    "def test3():\n",
    "    print(\"prime number\")\n",
    "if __name__==\"__main__\":\n",
    "    c=multiprocessing.Process(target=test3())\n",
    "    print(1,3,5,7,11,13,17,19)\n",
    "    c.start()\n",
    "    c.join()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "aa47d29a-7ca1-45a5-9cd4-dbec74672f7f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "square number\n",
      "1 4 9 16 25 36 49 81\n"
     ]
    }
   ],
   "source": [
    "def test4():\n",
    "    print(\"square number\")\n",
    "if __name__==\"__main__\":\n",
    "    d=multiprocessing.Process(target=test4())\n",
    "    print(1,4,9,16,25,36,49,81)\n",
    "    d.start()\n",
    "    d.join()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40c55748-708d-46c2-a7e7-0fc1e21998e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#so in the above four process are created for printing different types of numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad743246-bd83-4b0d-b492-50a7b2e23452",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
