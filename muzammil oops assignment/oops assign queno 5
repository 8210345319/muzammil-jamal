{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c768d6bd-d5fd-4675-a1f2-323152c5f03d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#inheritance is the method by which a class inherit the function and attributes of another class.for example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ca2cb95a-8e4e-4005-b470-7d128dc47012",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "class variable_x:\n",
    "    def test_variable_x(self):\n",
    "        print(\"this is my variable x\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "72e3d15f-da91-49ac-85cd-12bce535839b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "class variable_y(variable_x):\n",
    "    def test_variable_y(self):\n",
    "        print(\"this is my variable y\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2da79118-5bb1-450d-a1aa-d4d704028cd8",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "obj_variable_y=variable_y()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "345bcdef-969a-4ef9-a9a4-7d1e2e61a545",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is my variable x\n"
     ]
    }
   ],
   "source": [
    "obj_variable_y.test_variable_x()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da641604-b64f-4039-80ad-0d338fd72da5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# so this is multilevel inheritance as class variable x got inherited in class variable_y."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f8193634-1b67-421f-92ac-6f2495338b46",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "class variable_x:\n",
    "    def test_variable_x(self):\n",
    "        print(\"this is my variable x\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "34320962-cd84-468c-811f-1af233bfac27",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "class variable_y:\n",
    "    def test_variable_y(self):\n",
    "        print(\"this is my variable y\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6514ac04-f8f2-4a12-aefa-8a2640a8f8c8",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "class variable_z(variable_x,variable_y):\n",
    "    pass\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e910bac5-4002-4fbf-bfe8-04ac113ae131",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "obj_variable_z=variable_z()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "62f91a75-5bdb-493a-a133-2dc1470f445a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is my variable x\n"
     ]
    }
   ],
   "source": [
    "obj_variable_z.test_variable_x()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1a2745be-63a5-42bf-9ee0-11cf8d275545",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is my variable y\n"
     ]
    }
   ],
   "source": [
    "obj_variable_z.test_variable_y()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f85fed47-e98e-460e-a54a-99be522e7e4d",
   "metadata": {},
   "source": [
    "so in this way variable x and y which is of different class got inherited in class z and in this way we are able to access variable 'x' an 'y' in class variable' z'."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
