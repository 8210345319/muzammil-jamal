{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f230a33-9d80-4aec-8c94-a094ccf299cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#generator is a function in python that return an iterator using yield keyword"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55c41bf0-a021-4dd2-99ee-b7941eecc615",
   "metadata": {},
   "outputs": [],
   "source": [
    "#for example given below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "727417fd-938a-406d-8600-c06ed4f0e372",
   "metadata": {},
   "outputs": [],
   "source": [
    "fib10=1,1,1,1,1,1,1,1,1,1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "43c03fb7-909f-404e-ab3f-8e78901bef48",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def test_fib(n) :\n",
    "    a,b=1,1\n",
    "    for i in range(n):\n",
    "        yield a\n",
    "        a,b = b,a*b\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "54d5354b-ef10-4eba-83dc-f5ba774ede5c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<generator object test_fib at 0x000001B008A3C040>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_fib(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6c6862be-233b-4f22-9f1c-281321296f51",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "for i in test_fib(10):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4078ae03-415b-412f-928d-e1d782a49544",
   "metadata": {},
   "outputs": [],
   "source": [
    "#this is how generator function work"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
