{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d721b44-a0ba-4652-9ca1-fe1613d2ff81",
   "metadata": {},
   "outputs": [],
   "source": [
    "# using reduce function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c2e393e4-d392-440b-a866-2f624048df72",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from functools import reduce"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4aa4515b-b788-41ba-ad31-28a1fee40ff0",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "l=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "30cf925e-1298-44cc-95de-e3814ccadc6a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15511210043330985984000000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reduce(lambda x , y : x*y , l)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "277d7a93-57bd-476f-8c8c-aea8f53b35d3",
   "metadata": {},
   "source": [
    "so this the way we are able to get product of no from 1 to 25"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
