{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "394204a3-05ed-4fd5-8cf1-ad1e2631f9bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#finding palindrome using lambda and filter function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a873df07-10dd-4435-9667-c10b04ced248",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['python', 'php', 'aba', 'radar', 'level']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l=['python','php','aba','radar','level']\n",
    "l"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a46e97d4-cf83-46c9-b3bc-d56a98369ece",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['php', 'aba', 'radar', 'level']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(filter(lambda x:(x==\"\".join(reversed(x))),l))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "085da1e9-2a15-4edb-b1c1-9c6b7779a46a",
   "metadata": {},
   "source": [
    "so above are the list of palindrome by using filter funct"
   ]
  },
  {
   "cell_type": "raw",
   "id": "059494b1-23a3-4d41-9aa2-3b7a279f3bc3",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ddd5578-e4a2-4fe1-8538-e5c83fefc196",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
